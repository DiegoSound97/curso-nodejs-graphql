    type Query {

        hello: String!
        getPerson(name:String, age:Int): String
        getInt(age: Int!): Int 
        getFloat(price: Float): Float
        getString: String
        getBoolean: Boolean
        getID: ID
        getNumbers(numbers:[Int!]!) : [Int]
        #Products
        product(id:ID!): Product
        products:[Product!]!
        category(id:ID!): Category


    }

    type Mutation {
        login(email:EmailAddress!,password:String!): AuthResponse
        addProduct(dto: createProductDto!):Product
        updateProduct(id: ID!,dto: updateProductDto!): Product
        deleteProduct(id:ID!): ID
        addCategory(dto: CreateCategoryDto): Category
    }

    # Comentario

    type Product {
        id: ID!
        name: String!
        price: Float!
        description: String!
        image: String!
        createdAt: String!
        categoryId: ID!
        category: Category!
    }

    type Category{
        id: ID!
        name: String!
        image: String!
        products: [Product!]!
    }


    input createProductDto{
        name:String!
        price: Int!
        description:String!
        image:String!
        categoryId: ID!
    }

    input updateProductDto{
        name:String
        price: Int
        description:String
        image:String
        categoryId: ID
    }

    type AuthResponse{
        access_token: String!
        user: User!
    }

    type User{
        id: ID!
        email: String!
        role:String!
        createdAt: String!
    }

    input CreateCategoryDto{
        name:CategoryNameType!
        image:URL!
    }
scalar CategoryNameType